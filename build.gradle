plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
  id "org.jetbrains.kotlin.jvm" version "1.8.21"
}

version = project.mod_version
group = project.maven_group

<<<<<<< Updated upstream
//Version Format (McVersion-MajorMOD.MajorAPI.Minor.Patch-VersionStatus)
version = "${mc_version}-${major_mod}.${major_api}.${minor}.${patch}-${versionStatus.toString()}"
group = 'com.alrex'
archivesBaseName = 'ParCool'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
        mappings channel: 'official', version: "${mc_version}"


    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            if (shouldLogDetailDebugInfo) {
                // Recommended logging data for a userdev environment
                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            }
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            if (shouldLogDetailDebugInfo) {
                // Recommended logging data for a userdev environment
                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            }
            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            if (shouldLogDetailDebugInfo) {
                // Recommended logging data for a userdev environment
                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            }
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'parcool', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
=======
base {
	archivesName = project.archives_base_name
>>>>>>> Stashed changes
}

repositories {
<<<<<<< Updated upstream
    maven { url = 'https://maven.blamejared.com' }
    maven { url "https://www.cursemaven.com" }
=======
	mavenCentral()
	maven { url = "https://maven.quiltmc.org/repository/release" } // QM
	maven { url = "https://maven.parchmentmc.org" } // Parchment

	maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
	maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.tterrag.com/" } // Flywheel
	maven { url = "https://maven.shedaniel.me/" } // REI and deps
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Sodium, Sandwichable
	maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
	maven { url = "https://ladysnake.jfrog.io/artifactory/mods" } // CCA, for Trinkets
	maven { url = "https://modmaven.dev" } // Botania
	maven { // Reach Entity Attributes
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content { includeGroup("com.jamieswhiteshirt") }
	}
	maven {
		name = "Fuzs Mod Resources"
		url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
	}
	maven { url = "https://cursemaven.com" }
>>>>>>> Stashed changes
}

dependencies {
<<<<<<< Updated upstream
    // Specify the version of Minecraft to use.
    minecraft "net.minecraftforge:forge:${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compileOnly fg.deobf("curse.maven:feathers-699933:4355016")
    runtimeOnly fg.deobf("curse.maven:feathers-699933:4355016")
    runtimeOnly fg.deobf("curse.maven:pehkui-319596:4461977")
=======
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"


	modImplementation(include("io.github.fabricators_of_create:Porting-Lib:$port_lib_version+$minecraft_version"))

	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:4.2.0"

	modImplementation "curse.maven:forgeconfigapiport-547434:3943250"

	implementation 'com.electronwill.night-config:core:3.6.5'
	implementation 'com.electronwill.night-config:toml:3.6.5'
//	modApi(include("net.minecraftforge:forgeconfigapiport-fabric:3.2.4"))   // e.g. 5.0.0 for Minecraft 1.19.3

	// Adds a dependency on a specific module
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-api:4.2.0"
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
>>>>>>> Stashed changes
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}